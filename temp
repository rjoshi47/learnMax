ML MIT
1. https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-867-machine-learning-fall-2006/lecture-notes/
2. https://ocw.mit.edu/courses/mathematics/18-409-algorithmic-aspects-of-machine-learning-spring-2015/lecture-notes/
3. [Algo] https://ocw.mit.edu/courses/sloan-school-of-management/15-097-prediction-machine-learning-and-statistics-spring-2012/lecture-notes/
4. https://ocw.mit.edu/courses/mathematics/18-657-mathematics-of-machine-learning-fall-2015/lecture-notes/

Stan
1. http://cs229.stanford.edu/syllabus.html
2. [P&S] https://see.stanford.edu/materials/lsocoee364a/hw1sol.pdf

IIT
1. [Convex sets] https://www.cse.iitk.ac.in/users/rmittal/prev_course/s14/notes/lec3.pdf
2. https://www.cse.iitk.ac.in/users/rmittal/course_s18.php

misc.
1. https://www.google.com/search?q=prove+if+a+set+in+affine&ie=utf-8&oe=utf-8&client=firefox-b-ab


function [J grad] = nnCostFunction(nn_params, ...
                                   input_layer_size, ...
                                   hidden_layer_size, ...
                                   num_labels, ...
                                   X, y, lambda)
%NNCOSTFUNCTION Implements the neural network cost function for a two layer
%neural network which performs classification
%   [J grad] = NNCOSTFUNCTON(nn_params, hidden_layer_size, num_labels, ...
%   X, y, lambda) computes the cost and gradient of the neural network. The
%   parameters for the neural network are "unrolled" into the vector
%   nn_params and need to be converted back into the weight matrices. 
% 
%   The returned parameter grad should be a "unrolled" vector of the
%   partial derivatives of the neural network.
%

% Reshape nn_params back into the parameters Theta1 and Theta2, the weight matrices
% for our 2 layer neural network
Theta1 = reshape(nn_params(1:hidden_layer_size * (input_layer_size + 1)), ...
                 hidden_layer_size, (input_layer_size + 1));

Theta2 = reshape(nn_params((1 + (hidden_layer_size * (input_layer_size + 1))):end), ...
                 num_labels, (hidden_layer_size + 1));

% Setup some useful variables
M = size(X, 1);
J = 0;
a1 = X; %[5000x400]
X = [ones(size(X,1),1) X];
% X [5000x401]
% Theta1 [25x401]

z2 = X*Theta1';
a2 = sigmoid(z2); % 5000x25
a2 = [ones(size(a2,1), 1) a2]; % 5000x26
% Theta2 [10x26]

z3 = a2*Theta2';
a3 = sigmoid(z3); % 5000x10
% y [5000x1]
yRef = [zeros(num_labels,1)];

for m = 1:M
  actualy = y(m,1);
  if (actualy == 0)
    actualy = 10;
  end;
  yi = yRef; % 10x1
  yi(actualy,1) = 1;
  
  hx = a3(m,:); % 1x10
  J += sum(log(hx').*yi + log(1-hx').*(1-yi));
end;
J = -(J/M);

sqTheta1 = Theta1(:,2:size(Theta1,2)).^2;
sqTheta2 = Theta2(:,2:size(Theta2,2)).^2;
regSum = (lambda/(2*m))*(sum(sum(sqTheta1)) + sum(sum(sqTheta2)));

J += regSum;

% You need to return the following variables correctly 

Theta1_grad = zeros(size(Theta1));
Theta2_grad = zeros(size(Theta2));

dough3 = zeros(size(a3)); % 5000x10
for m = 1:M
  actualy = y(m,1);
  if (actualy == 0)
    actualy = 10;
  end;
  yi = yRef; % 10x1
  yi(actualy,1) = 1;
  a3i = a3(m,:)'; % 10x1; 
  dough3(m,:) = (a3i - yi)'; % 1x10
end;

% Theta2 [10x26] z2 5000x25
dough2 = (dough3*Theta2(:,2:size(Theta2,2))).*(sigmoidGradient([z2])); %5000x25

% a2 [5000x26] a1[5000x400]
delta2 = (dough3'*a2); %[10x26]
delta1 = (dough2'*a1); %[25x400]

% Theta1 [25x401]
% Theta2 [10x26]
Theta1_grad = (1/M)*[zeros(size(delta1,1),1) delta1];
Theta2_grad = (1/M)*delta2;

%size(Theta1_grad)
%size(Theta2_grad)
% ====================== YOUR CODE HERE ======================
% Instructions: You should complete the code by working through the
%               following parts.
%
% Part 1: Feedforward the neural network and return the cost in the
%         variable J. After implementing Part 1, you can verify that your
%         cost function computation is correct by verifying the cost
%         computed in ex4.m
%
% Part 2: Implement the backpropagation algorithm to compute the gradients
%         Theta1_grad and Theta2_grad. You should return the partial derivatives of
%         the cost function with respect to Theta1 and Theta2 in Theta1_grad and
%         Theta2_grad, respectively. After implementing Part 2, you can check
%         that your implementation is correct by running checkNNGradients
%
%         Note: The vector y passed into the function is a vector of labels
%               containing values from 1..K. You need to map this vector into a 
%               binary vector of 1's and 0's to be used with the neural network
%               cost function.
%
%         Hint: We recommend implementing backpropagation using a for-loop
%               over the training examples if you are implementing it for the 
%               first time.
%
% Part 3: Implement regularization with the cost function and gradients.
%
%         Hint: You can implement this around the code for
%               backpropagation. That is, you can compute the gradients for
%               the regularization separately and then add them to Theta1_grad
%               and Theta2_grad from Part 2.
%
% -------------------------------------------------------------

% =========================================================================

% Unroll gradients
grad = [Theta1_grad(:) ; Theta2_grad(:)];
end



g = sigmoid(z).*(1 - sigmoid(z));
